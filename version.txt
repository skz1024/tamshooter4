참고: skz1024는 글을 작성하는 과정에서 계속 수정하다보니 실수로 번호를 잘못 지정할 수도 있음. (예를들어, 중간번호가 빠지는경우... 이건 실수입니다.)

2022/03/01 start?
2022/05/05 ver 0.10
- 대략적인 게임 코드 설계 완료
- 대부분의 기능은 미완성 상태입니다.

현재까지 추가된 기능
- 키보드 및 마우스 인식 (단, 이 게임에서는 키보드를 버튼처럼 취급합니다.)
- 사운드 기능 (아직 시스템 사운드만 있습니다.)
- 자동 저장 기능 (플레이 타임, 유저 첫 생성 날짜만 저장 가능)
- 필드 기능 (아군이 총알을 쏘고 적이 죽는것까지 구현되어있습니다.)

현재까지의 코드 상황을 저장하기 위해 0.1 버전을 만들었습니다.
(여기까지 완성하는데 약 2달... 이건 코드를 만드는게 어렵고 이것저것 실험을 많이 해서 그런겁니다.)


2022/05/14 ver 0.11-1
1. 코드의 구성이 변경되어, 이제 tamshooter4Data는 클래스만 리턴합니다.
  따라서, fieldState에서 직접 인스턴스를 생성하는 방식으로 변경되었습니다.
1-1. 이렇게 만든 이유는, 며칠동안 새로운 알고리즘을 추가하고, 한개에 함수에 몰아넣었던 로직을 다른 함수로 기능을 분리하는 과정에서, undefined 함수 참조 문제가 발생해, 원인을 찾아보니 data 함수에서는 해당 함수가 있었지만, fieldState의 fieldObject 클래스는 해당 함수가 없어 함수를 참조할 수 없는 문제가 발생했습니다.
1-2. 이 문제를 해결하는 기존 방법은, fieldObject 클래스에 data에서 사용되었던 함수를 지속적으로 추가하는 거였습니다. 그러나, 새로운 무기가 나온다면, 당연히 새로운 알고리즘이 나올것이고, 당연히 로직이 길어지는 과정에서 여러 함수들로 기능을 쪼갤것인데, 이렇게 되다보면 나중에 새로운 무기를 개발할때마다 새로운 함수를 fieldObject에 지속적으로 추가해야만 합니다. 이로 인하여, 기존 방식으로 개발하게되면 나중에 유지보수가 매우 힘들어집니다. 그 때문에, 새로운 방식을 며칠동안 고민해야 했습니다.
1-3. 결국, fieldState에서 직접 클래스 데이터를 받아와 인스턴스를 생성하는 방식으로 변경하였습니다. 자바스크립트는 배열에 다양한 객체를 넣을 수 있기 때문에 가능한 방법이였으며, 어떤 로직을 만들고 다른 함수로 기능을 분해한다고 해도, fieldState는 process, display, fieldProcess만 호출하면 모든 역할이 끝납니다.


2022/05/16 ver 0.11-2
1. damageObject가 추가되었습니다.
이 오브젝트는 적을 타격하여 데미지를 주었을 때 그 데미지의 값을 출력합니다.
이 오브젝트는 임시이며, 나중에 다른 형태로 변경될 수 있습니다.
2. missile 알고리즘이 추가되었습니다.
사실, multyshot은 구현하기가 매우 쉬웠지만, missile은 스플래시모드와 일반모드, 그리고 적 여러명을 동시에 때려야 하고 여러번 폭발해야 하기 때문에 구현하기 위해서는 복잡한 로직이 필요했습니다. 실제 코드를 보면 알 수 있듯이, 내부적으로 로직이 여러개로 분리되어 각 역할을 수행하는 것을 알 수 있습니다. multyshot은 따로 알고리즘이 존재하진 않지만, missile은 multyshot에 비해선 알고리즘 복잡한 편입니다. 그리고 이 미사일 알고리즘은, 이전에 만들었던 fieldObject 처리 방식을 변경하는 원인이 되었습니다. (자세한건 ver 0.11-1 참고)
3. effectObject가 추가되었습니다. 일단 목적은 간단해요. 이펙트 에니메이션을 출력하는 역할입니다. 첫번째 이펙트는 당연히 missile입니다. missile이 터지는 효과가 있어야 스플래시 데미지를 주는 느낌이 나니까요. multyshot은 이펙트가 필요 없지만, missile은 있어야 합니다.
4. 참고로, 이펙트는 모든 오브젝트가 가지고 있는 것은 아니고, 부분적으로만 가지고 있습니다. 어떤건 이펙트가 있고, 어떤건 이펙트가 없어요. 그냥 그렇습니다.
5. 이펙트의 투명도가 0.7(70%)로 조정됩니다. 이유는 눈아파서...
6. testAttackEnemy가 추가되었습니다. 딱히 의미는 없고, 플레이어 충돌시 데미지를 주느냐의 테스트 목적입니다.
